@startuml use-case-flow
!theme plain
title Use Case Flow - Create Order Example

participant "REST Controller" as Controller #B4FFE5
participant "CreateOrderUseCase" as UseCase #B4E5FF
participant "CustomerRepository" as CustRepo #FFE5B4
participant "ProductRepository" as ProdRepo #FFE5B4
participant "OrderRepository" as OrderRepo #FFE5B4
participant "PricingService" as Pricing #FFE5B4
participant "PaymentServicePort" as Payment #B4E5FF
participant "EventPublisherPort" as EventPub #B4E5FF
participant "StripeAdapter" as Stripe #E5B4FF
participant "KafkaAdapter" as Kafka #E5B4FF

' Request flow
Controller -> Controller: Validate request
Controller -> UseCase: invoke(CreateOrderCommand)
activate UseCase

UseCase -> CustRepo: findById(customerId)
CustRepo --> UseCase: Either<Error, Customer>

UseCase -> UseCase: Check customer exists

loop for each item
    UseCase -> ProdRepo: findById(productId)
    ProdRepo --> UseCase: Either<Error, Product>
    UseCase -> UseCase: Check product availability
end

UseCase -> UseCase: Create Order entity
UseCase -> Pricing: calculatePrice(order, customer)
Pricing --> UseCase: Either<Error, PricedOrder>

UseCase -> OrderRepo: save(order)
OrderRepo --> UseCase: Either<Error, Order>

UseCase -> Payment: processPayment(amount, card)
Payment -> Stripe: charge(paymentDetails)
Stripe --> Payment: PaymentResult
Payment --> UseCase: Either<Error, PaymentResult>

UseCase -> UseCase: Create OrderCreatedEvent

UseCase -> EventPub: publish(event)
EventPub -> Kafka: send(topic, event)
Kafka --> EventPub: Success
EventPub --> UseCase: Either<Error, Unit>

UseCase -> UseCase: Map to OrderDto
UseCase --> Controller: Either<Error, OrderDto>
deactivate UseCase

Controller -> Controller: Map to OrderResponse
Controller --> Client: HTTP 200 + OrderResponse

note over Controller, UseCase
    **Presentation Layer**
    • Input validation
    • HTTP handling
    • Response mapping
end note

note over UseCase, EventPub
    **Application Layer**
    • Use case orchestration
    • Domain coordination
    • Port interfaces
end note

note over CustRepo, Pricing
    **Domain Layer**
    • Business entities
    • Domain services
    • Repository interfaces
end note

note over Stripe, Kafka
    **Infrastructure Layer**
    • External integrations
    • Technical implementations
    • Adapter patterns
end note

@enduml