@startuml hexagonal-ports-adapters
!theme plain
title Hexagonal Architecture - Ports and Adapters Pattern
caption Shows how the application core is isolated from external concerns through ports and adapters

skinparam component {
    BackgroundColor<<Core>> #FFE5B4
    BackgroundColor<<Port>> #87CEEB
    BackgroundColor<<Adapter>> #98FB98
    BackgroundColor<<External>> #FFB6C1
    BorderColor Black
    FontSize 12
}

skinparam interface {
    BackgroundColor #87CEEB
    BorderColor Black
}

' Center hexagon representing the application core
package "Application Core" <<Core>> {
    
    package "Use Cases" {
        [CreateGreetingUseCase] as usecase
        [CreateBatchGreetingsUseCase] as batch
    }
    
    package "Domain" {
        [PersonName] as domain1
        [GreetingService] as domain2
        [GreetingPolicy] as domain3
        [DomainError] as domain4
    }
    
    usecase --> domain2
    usecase --> domain1
    batch --> usecase
}

' Input Ports (Driving/Primary)
package "Input Ports" <<Port>> {
    interface "CreateGreetingInputPort" as input_port
}

' Output Ports (Driven/Secondary)
package "Output Ports" <<Port>> {
    interface "OutputPort" as output_port
    interface "ErrorOutputPort" as error_port
    interface "GreetingService" as service_port
}

' Input Adapters (Driving/Primary)
package "Input Adapters" <<Adapter>> {
    [PureAsyncCli] as cli_adapter
    note right : Future adapters:\n- REST Controller\n- GraphQL Resolver\n- gRPC Service
}

' Output Adapters (Driven/Secondary)
package "Output Adapters" <<Adapter>> {
    
    package "Message Output" {
        [ConsoleOutputAdapter] as console
        [FileOutputAdapter] as file
        [BufferedFileOutputAdapter] as buffer
        [CompositeOutputAdapter] as composite
    }
    
    package "Error Output" {
        [ConsoleErrorOutputAdapter] as error_console
    }
    
    package "Service Implementations" {
        [DefaultGreetingService] as greeting_impl
    }
}

' External Systems
package "External Systems" <<External>> {
    [User Terminal] as terminal
    [File System] as filesystem
    [System.out] as stdout
    [System.err] as stderr
}

' Connections - Input Side
cli_adapter --> input_port : uses
usecase ..|> input_port : implements

' Connections - Output Side
usecase --> output_port : uses
usecase --> error_port : uses
usecase --> service_port : uses

console ..|> output_port : implements
file ..|> output_port : implements
buffer ..|> output_port : implements
composite ..|> output_port : implements
error_console ..|> error_port : implements
greeting_impl ..|> service_port : implements

' External connections
terminal --> cli_adapter : commands
console --> stdout : writes
error_console --> stderr : writes
file --> filesystem : writes
buffer --> filesystem : writes

' Hexagon visualization (decorative)
note as HexNote
<b>Hexagonal Architecture Benefits:</b>
• Testability - swap real adapters for test doubles
• Flexibility - add new adapters without changing core
• Isolation - business logic independent of infrastructure
• Portability - core can run anywhere
end note

@enduml