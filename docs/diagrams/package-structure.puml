@startuml package-structure
!theme plain
title Hybrid Architecture - Package Structure

skinparam packageStyle rectangle
skinparam package {
    BackgroundColor<<Domain>> #E8F5E8
    BackgroundColor<<Application>> #E8F0FF
    BackgroundColor<<Infrastructure>> #FFF5E8
    BackgroundColor<<Presentation>> #FFE8F0
    BackgroundColor<<Bootstrap>> #F0F0F0
    BorderColor #666666
}

skinparam note {
    BackgroundColor #FFFFCC
    BorderColor #666666
}

package "com.abitofhelp.hybrid" {
    
    package "domain" <<Domain>> {
        package "value" {
            class PersonName
        }
        package "service" {
            interface GreetingService
            class GreetingPolicy
        }
        package "error" {
            class DomainError
        }
    }
    
    package "application" <<Application>> {
        package "usecase" {
            class CreateGreetingUseCase
            class CreateBatchGreetingsUseCase
        }
        package "port.input" {
            interface CreateGreetingInputPort
            interface CreateBatchGreetingsInputPort
        }
        package "port.output" {
            interface OutputPort
            interface BatchProcessingPort
        }
        package "dto" {
            class CreateGreetingCommand
            class BatchGreetingCommand
            class GreetingResult
        }
        package "error" {
            class ApplicationError
        }
        package "coroutines" {
            class CoroutineErrorHandler
        }
    }
    
    package "infrastructure" <<Infrastructure>> {
        package "adapter.output" {
            class ConsoleOutputAdapter
            class ConsoleErrorOutputAdapter
            class FileOutputAdapter
            class BufferedFileOutputAdapter
            class CompositeOutputAdapter
        }
        package "service" {
            class DefaultGreetingService
        }
    }
    
    package "presentation" <<Presentation>> {
        package "cli" {
            class AsyncCliRunner
            class PureAsyncCli
            class CliFactory
            class PresentationConfig
            interface Runnable
        }
    }
    
    package "bootstrap" <<Bootstrap>> {
        class AsyncEntryPoint
        class CompositionRoot
        class SecureArgParser
        class AppConfig
        class EntryPoint
    }
}

note right of domain : "No external dependencies\nPure business logic\nStable core"
note left of application : "Orchestrates business logic\nDefines boundaries (ports)\nNo infrastructure dependencies"
note bottom of infrastructure : "Technical implementations\nExternal system integrations\nImplements domain and application interfaces"
note top of presentation : "User interface layer\nCLI implementation\nFuture: REST, GraphQL, Web UI"
note right of bootstrap : "Entry point and DI\nOnly module that knows all types\nWires all dependencies"

' Dependencies (following clean architecture rules)
domain <-- application
domain <-- infrastructure
application <-- infrastructure
application <-- presentation
infrastructure <-- bootstrap
application <-- bootstrap
presentation <-- bootstrap

@enduml