@startuml domain-model
!theme plain
title Domain Model - Core Business Concepts
caption The greeting domain focuses on name validation and personalized greeting generation

skinparam class {
    BackgroundColor<<ValueObject>> #FFE5B4
    BackgroundColor<<DomainService>> #FFDAB9
    BackgroundColor<<Error>> #FFB6C1
    BackgroundColor<<Enum>> #E6E6FA
    BorderColor Black
    FontSize 12
}

skinparam note {
    BackgroundColor #FFFFCC
    BorderColor #666666
}

' Value Objects
class PersonName <<ValueObject>> {
    - name: String
    + {static} of(name: String): Either<DomainError, PersonName>
    + {static} anonymous(): PersonName
    + toString(): String
    --
    Business Rules:
    • 1-50 characters
    • Letters and spaces only
    • Cannot be blank
}

' Enums
enum GreetingFormat <<Enum>> {
    CASUAL
    FORMAL
    FRIENDLY
    PROFESSIONAL
    --
    + getTemplate(): String
}

' Domain Services
interface GreetingService <<DomainService>> {
    + createGreeting(name: PersonName, format: GreetingFormat): Either<DomainError, String>
}

class GreetingPolicy <<DomainService>> {
    + {static} determineFormat(name: PersonName): GreetingFormat
    + {static} isAnonymous(name: PersonName): Boolean
    --
    Business Logic:
    • Anonymous users get CASUAL format
    • Named users get FRIENDLY format
}

' Errors
abstract class DomainError <<Error>> {
}
class ValidationError extends DomainError {
    message: String
}
class BusinessRuleViolation extends DomainError {
    rule: String
    message: String
}
class NotFound extends DomainError {
    entityType: String
    identifier: String
}

' Service Implementation (Infrastructure boundary)
class DefaultGreetingService <<DomainService>> {
    + createGreeting(name: PersonName, format: GreetingFormat): Either<DomainError, String>
    --
    Implementation Details:
    • Validates input parameters
    • Applies greeting template
    • Returns formatted greeting
}

' Relationships
GreetingService --> PersonName : validates
GreetingService --> GreetingFormat : uses
GreetingService --> DomainError : returns on failure

GreetingPolicy --> PersonName : analyzes
GreetingPolicy --> GreetingFormat : determines

DefaultGreetingService ..|> GreetingService : implements
DefaultGreetingService --> GreetingPolicy : uses

PersonName --> DomainError : validates against

note top of PersonName
    <b>Value Object Pattern</b>
    • Immutable
    • Self-validating
    • Rich behavior
    • Equality by value
end note

note right of GreetingFormat
    <b>Enum Pattern</b>
    • Finite set of options
    • Type-safe constants
    • Behavior attached
end note

note bottom of GreetingService
    <b>Domain Service Pattern</b>
    • Stateless operations
    • Pure business logic
    • No infrastructure concerns
end note

@enduml